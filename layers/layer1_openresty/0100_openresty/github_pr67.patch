diff -up openresty-1.13.6.2/bundle/ngx_lua_upstream-0.07/src/ngx_http_lua_upstream_module.c.fabien openresty-1.13.6.2/bundle/ngx_lua_upstream-0.07/src/ngx_http_lua_upstream_module.c
--- openresty-1.13.6.2/bundle/ngx_lua_upstream-0.07/src/ngx_http_lua_upstream_module.c.fabien	2019-05-13 12:14:37.818496476 +0200
+++ openresty-1.13.6.2/bundle/ngx_lua_upstream-0.07/src/ngx_http_lua_upstream_module.c	2019-05-13 12:15:02.121123075 +0200
@@ -31,8 +31,8 @@ static int ngx_http_lua_get_peer(lua_Sta
     ngx_http_upstream_rr_peer_t *peer, ngx_uint_t id);
 static ngx_http_upstream_srv_conf_t *
     ngx_http_lua_upstream_find_upstream(lua_State *L, ngx_str_t *host);
-static ngx_http_upstream_rr_peer_t *
-    ngx_http_lua_upstream_lookup_peer(lua_State *L);
+static ngx_http_upstream_rr_peers_t *
+    ngx_http_lua_upstream_lookup_peers(lua_State *L);
 static int ngx_http_lua_upstream_set_peer_down(lua_State * L);
 static int ngx_http_lua_upstream_current_upstream_name(lua_State *L);
 
@@ -251,6 +251,7 @@ ngx_http_lua_upstream_get_primary_peers(
 {
     ngx_str_t                             host;
     ngx_uint_t                            i;
+    ngx_http_upstream_rr_peer_t          *peer;
     ngx_http_upstream_rr_peers_t         *peers;
     ngx_http_upstream_srv_conf_t         *us;
 
@@ -277,11 +278,17 @@ ngx_http_lua_upstream_get_primary_peers(
 
     lua_createtable(L, peers->number, 0);
 
-    for (i = 0; i < peers->number; i++) {
-        ngx_http_lua_get_peer(L, &peers->peer[i], i);
+    ngx_http_upstream_rr_peers_rlock(peers);
+
+    for (i = 0, peer = peers->peer; i < peers->number;
+         i++, peer = peer->next) {
+
+        ngx_http_lua_get_peer(L, peer, i);
         lua_rawseti(L, -2, i + 1);
     }
 
+    ngx_http_upstream_rr_peers_unlock(peers);
+
     return 1;
 }
 
@@ -291,6 +298,7 @@ ngx_http_lua_upstream_get_backup_peers(l
 {
     ngx_str_t                             host;
     ngx_uint_t                            i;
+    ngx_http_upstream_rr_peer_t          *peer;
     ngx_http_upstream_rr_peers_t         *peers;
     ngx_http_upstream_srv_conf_t         *us;
 
@@ -323,11 +331,17 @@ ngx_http_lua_upstream_get_backup_peers(l
 
     lua_createtable(L, peers->number, 0);
 
-    for (i = 0; i < peers->number; i++) {
-        ngx_http_lua_get_peer(L, &peers->peer[i], i);
+    ngx_http_upstream_rr_peers_rlock(peers);
+
+    for (i = 0, peer = peers->peer; i < peers->number;
+         i++, peer = peer->next) {
+
+        ngx_http_lua_get_peer(L, peer, i);
         lua_rawseti(L, -2, i + 1);
     }
 
+    ngx_http_upstream_rr_peers_unlock(peers);
+
     return 1;
 }
 
@@ -335,32 +349,50 @@ ngx_http_lua_upstream_get_backup_peers(l
 static int
 ngx_http_lua_upstream_set_peer_down(lua_State * L)
 {
+    int                                   id, i;
     ngx_http_upstream_rr_peer_t          *peer;
+    ngx_http_upstream_rr_peers_t         *peers;
 
     if (lua_gettop(L) != 4) {
         return luaL_error(L, "exactly 4 arguments expected");
     }
 
-    peer = ngx_http_lua_upstream_lookup_peer(L);
-    if (peer == NULL) {
+    peers = ngx_http_lua_upstream_lookup_peers(L);
+    if (peers == NULL) {
+        return 2;
+    }
+
+    id = luaL_checkint(L, 3);
+    if (id < 0 || (ngx_uint_t) id >= peers->number) {
+        lua_pushnil(L);
+        lua_pushliteral(L, "bad peer id");
         return 2;
     }
 
+    for (i = 0, peer = peers->peer; i < id;
+         i++, peer = peer->next) {
+        /*void*/
+    }
+
+    ngx_http_upstream_rr_peers_wlock(peers);
+
     peer->down = lua_toboolean(L, 4);
 
     if (!peer->down) {
         peer->fails = 0;
     }
 
+    ngx_http_upstream_rr_peers_unlock(peers);
+
     lua_pushboolean(L, 1);
     return 1;
 }
 
 
-static ngx_http_upstream_rr_peer_t *
-ngx_http_lua_upstream_lookup_peer(lua_State *L)
+static ngx_http_upstream_rr_peers_t *
+ngx_http_lua_upstream_lookup_peers(lua_State *L)
 {
-    int                                   id, backup;
+    int                                   backup;
     ngx_str_t                             host;
     ngx_http_upstream_srv_conf_t         *us;
     ngx_http_upstream_rr_peers_t         *peers;
@@ -393,14 +425,7 @@ ngx_http_lua_upstream_lookup_peer(lua_St
         return NULL;
     }
 
-    id = luaL_checkint(L, 3);
-    if (id < 0 || (ngx_uint_t) id >= peers->number) {
-        lua_pushnil(L);
-        lua_pushliteral(L, "bad peer id");
-        return NULL;
-    }
-
-    return &peers->peer[id];
+    return peers;
 }
 
 
